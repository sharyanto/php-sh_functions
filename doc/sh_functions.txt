==activerecord==

===argumen===

* name => STRING (required)

* required => BOOL (optional, default 0)

* hidden => BOOL (optional, default 0)

* autogenerated => BOOL (optional, default 0)

* datatype => STRING (required)

** string
** integer
** float

* samerow => BOOL (optional, default 0)

jika ya, maka field ini akan ditampilkan di row yang sama dengan row field
sebelumnya.

* jsfocus => BOOL (optional, default 0) OR array(START, END)

hanya relevan untuk input teks atau textarea.

jika ya, maka begitu form selesai dirender, focus UI akan ke elemen ini. ini
diimplementasi dengan focus() javascript.

jika diisi dengan array, maka kursor akan ditempatkan ke posisi ini (posisi
awal dihitung dari 1, bukan 0).



==grid==

tampilan grid:

                              Item 1 of X  First Prev Next Last      <---- PAGING BAR
 /------------------------------------------------------------\
 | [grid action] ...           [filter___[v]] ... ["Filter"]  |      <---- FILTER (& GRID ACTIONS) BAR
 |------------------------------------------------------------|
 |[x] ColTitle1   ColTitle2 .....                 Row Actions |      <---- ROW HEADER
 |------------------------------------------------------------|
 |[ ] value       value     .....                 <act1> ...  |     <----- ROWS
 |[ ] value       value     .....                 <act1> ...  |     <---/
 |[ ] value       value     .....                 <act1> ...  |     <--/
 ...
 |------------------------------------------------------------|
 |    value                                                   |     <----- OPTIONAL AVERAGE ROW
 |                value                                       |     <----- OPTIONAL TOTAL ROW
 \------------------------------------------------------------/
                (paging ---> Item 1 of X  First Prev Next Last)     <----- PAGING BAR
   ^   ^          ^         ^                     ^
   |   |          |         |                     |
   |   |          |         |                     \---- ROW ACTIONS COLUMN
   |    \----------------------- DATA COLUMNS
   |
   \----- CHECKBOXES COLUMN

grid adalah sebuah UI yang convenient untuk menampilkan sebuah "tabel"
2 dimensi dan memodifikasi row-nya.

checkboxes column berguna untuk menyeleksi satu atau lebih row. pada header row,
terdapat checkboxes yang berguna untuk select/unselect all rows in a page.
terdapat pula checkboxes untuk memilih all rows in a resultset.

row actions adalah action yang berlaku bagi sebuah row (mis: edit, delete, dsb)

grid actions adalah action yang berlaku bagi satu atau lebih row yang diseleksi
(mis: delete) atau untuk action seperti add new row, dsb.

filter ...

paging (+ export link) bar ...

row header bar ...

persyaratan memakai grid:

- tabel/view/source rows perlu memiliki kolom tunggal integer yang unik. meskipun
PK tabel database anda bukan integer/kolom tunggal, harap sediakan kolom tunggal
integer ini untuk mempermudah berbagai macam task.

===css===

* id FORMNAME_statusBar, class statusBar -> ajax status/progress
* saat sebuah proses ajax sedang berlangsung, statusBar akan diberi class inProgress

* id FORMNAME_filterBar
* id FORMNAME_topPagingBar, FORMNAME_bottomPagingBar
* id FORMNAME_dataTable
* class headerRow
* class dataRow
  saat diselect (checkbox), akan ditambah class "selected"
* class totRow
* class avgRow
* link row action dan tombol grid action yang ajax diberi class ajaxAction

===todo===

* highlight search terms

* cara edit record yang mirip2x datasheet di access atau spreadsheet. saat ini
  mengedit sebuah row kita tinggal mengklik row itu maka akan berubah jadi
  input boxes.

* row_more_actions

* css: parameter2x warna semuanya dihilangkan? lakukan via css semua?

* implement need_rows untuk grid_more_actions

* ajax_more_actions saat ini hanya mengenal ajax action update, tidak mengenal
  action yang lain seperti dialog. seharusnya mengenal ajax action lain dan juga
  dapat berbeda2x untuk tiap action.

* selain select all (rows in the current page), ada juga pilih select all
  (seluruh rows, yang memenuhi filter criteria saat itu). mirip2x seperti di
  gmail, saat kita pilih select all mis 50 spam pertama, ada pertanyaan lagi
  apakah ingin memilih seluruh 8000+ spam yang ada di spam folder?

* implement ajax_pre_commands

* implement jsconfirm untuk grid_more_actions

* internal: optimize, tidak perlu generate header bar, paging bar, dsb jika
tidak diminta.

* more efficient ajax update for 'delete a row' action (just shift the rows
  below, and request one more row from the server)

* implement date widget filter

* bisa hide/show columns secara interaktif

* bisa ubah2x urutan columns secara interaktif

* bisa set lebar kolom? mis ada tombol [+] atau "<< >>" jika diklik maka si
  kolom tersebut membesar sedikit (tapi gimana caranya?) kalau bisa semua pake
  javascript biar gak harus refresh page.

* UI agar orang bisa memperbesar/memperkecil font. kalo bisa pake javascript
  biar orang gak usah refresh page di setiap increment.

* ada view template (isinya predefined set of filter values, columns [sizes,
  order, mana yg on/off], sort order of columns, ukuran page, page ke berapa?,
  dsb) yang bisa dipake/diapply.

* opsi utk show/hide filters, biar tampilan lebih sederhana. keberadaan banyak
  filter membuat clutter/menakutkan orang juga.

* help (video, page with pictures, animation) bagaimana cara menggunakan grid.

* begitu tampil pertama, or jika mouse pointer diam di satu area, muncul balloon
  text penjelasan bahwa grid ini: "Daftar Semua Karyawan Yang Statusnya Z",
  "1012 Transaksi Bank dari rekening BCA PT Antara Tanggal X sd Y".

* opsi utk select all resultset, tidak hanya select all rows in a
  page. lihat gmail utk inspirasi (saat kita select all, ada lagi link
  utk select 9.001 conversations). agar sederhana dan tidak
  'disruptif', gw membayangkan interfacenya spt ini: ada checkbox
  kedua di rowheader checkbox sbb:

  [x]  menjadi -> [x]
                  [x]

  jika selectbox yg sebelah atas dicek, fungsinya sama seperti yg
  dulu, yaitu 'select all rows in this page'. cekbox yg kedua yg jika
  dicek selain select all rows in this page juga akan menampilkan
  confirmation dialog box: 'do you want to select all XXX' (apakah
  anda ingin memilih 9,000 rumah hasil filter?)

* custom clusters / alphabet selection bar sebagai alternatif (atau
  tambahan) untuk filter bar. seperti yang sering dilihat di
  addressbook. instead of

  Page x of y

  tapi:

  A B C D E ... Z

  atau:

  A-E F-J K-O P-T U-Z

  atau bisa juga digabung:

  Prev A B C ... Z Next

  atau custom clusters:

  Prev 1-10 10-100 100-1000 Next
  Prev  Kelas I  Kelas II  Kelas III  IV  V  VI  Next


===persiapan untuk public website===

minimal:

* ada help (balloon text boleh juga)

* interface select all resultset perlu diperbaiki, kurang intuitif


===parameter $grid===

$grid adalah array dengan key-key sebagai berikut:


====yang berhubungan dengan debugging===

* debug_showsql => BOOLEAN (optional)

jika true, maka perintah SQL yang akan dikirimkan ke database akan di-echo.

* debug_timesql => BOOLEAN (optional, default=false)

jika true, maka waktu eksekusi SQL akan di-echo.

* debug_timegen => BOOLEAN (optional, default=false)


====yang berhubungan dengan sql====

* sql_columns => STRING (wajib)

contoh: 'sql_columns' => '*'

ini akan dikirimkan ke dalam statement SQL. umumnya '*' tapi dapat
juga mis: 'a, b, c' (seleksi kolom) atau "*, DATE_FORMAT(a,
'%d/%m/%Y') AS formatted_a" (extra columns).

* sql_table => STRING (wajib)

nama tabel (atau view) yang ingin dipakai

* sql_wheres => ARRAY (optional, default=array())

contoh: 'sql_wheres' => "date>'2008-02-01'"

deretan klausa WHERE tambahan ini akan selalu ditambahkan di final sql
statement. gunakan untuk kriteria yang selalu harus ada, tidak
bergantung pada filter grid.

* sql_customfunc => STRING (optional, default=null)

nama fungsi untuk menggenerate SQL untuk menghasilkan rows, jika ingin
berbeda dari default. will be called with ($sql_wheres, $sortf,
$sorto, $limitoffset, $limitnum).

* sql_customcountfunc => STRING (optional, default=null)

nama fungsi untuk menggenerate SQL untuk menghasilkan jumlah row, jika
ingin berbeda dari default. will be called with ($sql_wheres).

* sqlresult_postprocfunc => STRING (optional, default=null)

will be called with ($rows) after sql is executed and $rows filled
with result.

====yang berhubungan dengan action====

* grid_actions => ARRAY (optional)

menspesifikasikan satu atau lebih row actions. setiap grid action adalah array yang
memiliki parameter-parameter berikut:

** name
** title
** need_rows => BOOL (optional, default 0)

jika diset 1, maka jika tidak ada row yang dipilih saat menekan tombol action ini,
akan dimunculkan pesan kesalahan Javascript. action2x seperti flag, delete, dsb biasanya
membutuhkan/bekerja pada satu atau lebih row, sehingga cocok menggunakan parameter ini.
sementara action seperti Add/Tambah tidak butuh row.

** jsconfirm => BOOL (optional, default 0)

jika diset 1, maka saat user mengklik akan muncul javascript confirm dialog dulu.
action akan dibatalkan jika user tidak mengconfirm Yes. dapat digunakan pada action2x
yang dianggap berbahaya seperti Delete/Hapus.

** extra_params => ARRAY (optional)

jika diset, akan menampilkan satu atau lebih javascript dialog untuk menanyakan
nilai parameter yang akan dikirimkan bersama action.

contoh:

 "extra_params" => array(
   array("name" => "foo", "prompt" => "Masukkan nilai foo", "default" => "123"),
   array("name" => "bar", "prompt" => "Masukkan nilai bar"),
 )


** ajax => STRING (optional, default '')

pilihan: 'update', 'dialog'

jika disebutkan, ini artinya link jika diklik tidak akan melakukan GET normal seperti
biasa yang akan menghasilkan pergantian page, melainkan AJAX action. ajax action yang
saat ini tersedia:

*** update -> akan request ke server untuk update grid
*** dialog -> akan membuka css-positioning modal dialog

untuk ajax update, skrip di server harus mengembalikan dokumen JSON (bukan HTML)
berisi daftar perintah, misalnya:

 [['update_top_paging_bar', 'kode html berisi paging bar baru...'],
  ['update_bottom_paging_bar', 'kode html berisi paging bar baru...'],
  ['update_row_count', 20],
  ['update_row_start', 1],
  ['update_row', 'ROW#', 'new checksum', 'new html code...'],
  ...]

perintah-perintah javascript yang saat ini dikenali grid:

*** update_top_paging_bar (html)
*** update_bottom_paging_bar (html)
*** update_row_count (val)
*** update_row_start (val)
*** update_row (rownum, checksum, html)
*** delete_current_row ()

** pre_ajax_commands => [command, ...] (optional)

NOT YET IMPLEMENTED.

ini adalah command javascript yang akan dieksekusi sebelum perintah ajax diluncurkan.
berguna untuk meningkatkan kesan responsivitas UI. misalnya, jika anda optimis action
delete akan berhasil, atau sebuah action pasti akan mengakibatkan sebuah row menjadi
tidak muncul lagi di grid (mis: statusnya menjadi 'read' sementara grid hanya menampilkan
yang statusnya 'unread'), maka anda bisa membuat row action seperti ini:

 array('name' => 'delete', title => 'Hapus',
       'ajax' => 'update', 'pre_ajax_commands' => array('delete_current_row'))


* grid_more_actions

sama seperti grid_actions, hanya saja saat dirender tidak menjadi tombol melainkan
select box. ini untuk mencantumkan lebih banyak action di mana jika semuanya ditaruh
di grid_actions maka jumlah tombol akan terlalu banyak.

parameternya sama seperti pada grid_actions, kecuali ajax ditentukan oleh parameter
grid 'ajax_more_actions' dan bukan per-action.



* row_actions => ARRAY (optional)

menspesifikasikan satu atau lebih row actions. setiap row action adalah array yang
memiliki parameter-parameter berikut:

** name
** title
** jsconfirm => BOOL (optional, default 0)
** ajax => STRING (optional, default '')

lihat penjelasan tentang parameter ini di section sebelumnya (grid_actions)

** pre_ajax_commands

lihat penjelasan tentang parameter ini di section sebelumnya (grid_actions)


====yang berhubungan dengan data====

* columns => ARRAY (wajib)

contoh: 'columns' => array(
  array('title'=>'kolom1', 'dbcolumn'=>'kolom1'),
  array('title'=>'kolom2', 'dbcolumn'=>'kolom2', 'sortable'=>true),
  array('title'=>'kolom3', 'dbcolumn'=>'kolom3', 'value_template'=>'[[formatted_date]]'))

definisi kolom. setiap kolom memiliki struktur sbb:

** title => STRING (wajib)
** dbcolumn => STRING (optional)
** sortable => BOOLEAN (optional, default=false)
** value_template => STRING (optional)
** value_func => STRING (optional)

** calc_total => BOOL (opt, default=false)
** calc_average => BOOL (opt, default=false)

** align_data => STRING (optional)
** nowrap_header => BOOLEAN (optional, default=false)
** nowrap_data => BOOLEAN (optional, default=false)
** width => INT (optional)

** color => STRING
** bgcolor => STRING
** color_func [NOT IMPLEMENTED YET]
** bgcolor_func [NOT IMPLEMENTED YET]

jika sebuah kolom mendefinisikan warna, lalu sebuah row juga
mendefinisikan warna, maka warnanya akan dimix/diaverage berdasarkan
nilai RGB-nya (mis: ffcc11 dan 00cc33 akan dimix menjadi 7fcc22).

* row_func => STRING (optional)

jika ingin menghasilkan data sendiri (bukan dari SQL).

fungsi akan dipanggil dengan argumen: ($_REQUEST, $sortf, $sorto, $start,
$page_size, $sort2f, $sort2o, $sort3f, $sort3o).

* row_count_func => STRING (optional)

akan dipanggil dengan argumen: ($_REQUEST)

====yang berhubungan dengan URL====

* browse_action => STRING (optional)

jika disebutkan, link2x utk sorting, navigasi akan ditambahi parameter
"_action=...". ini berguna jika sebuah skrip php memiliki beberapa mode tampilan
atau beberapa grid berbeda, tergantung dari parameter _action.

====yang berhubungan dengan tampilan====

* page_size => INT (optional, default=25)

* simple_paging => BOOL (optional, default false)

ini berhubungan dengan performance jika database besar/SQL lambat. jika diset 0
(default), maka librari akan melakukan 2 panggilan SQL yaitu pertama "SELECT
COUNT(*)" untuk menghitung jumlah row yang ada, dan satu lagi "SELECT column..."
untuk mengambil datanya.

jika simple_paging diset 1, maka perintah "SELECT COUNT(*)" akan diskip. sebagai
gantinya, SELECT akan mengambil pagesize+1 buah row (1 row ekstra untuk
mengetahui apakah masih ada halaman berikutnya). akibatnya, kita hanya bisa
memberikan link [First page] (jika page > 1), [Previous Page] (jika page > 1),
atau [Next Page] (jika row yang direturn > pagesize). link [Last Page] dan
keterangan jumlah row tidak dapat ditampilkan. tapi, keuntungannya, waktu yang
diperlukan bisa hanya sekitar setengah karena kita hanya melakukan 1x SQL saja.

(tapi dalam kenyataannya, dengan cache database, penyingkatan waktu yang
diperoleh tidak sampai setengahnya?)

* ajax_filter => BOOL (optional, default 0)

jika diset 1 artinya perubahan filter akan dilakukan lewat AJAX update dan bukan POST
HTTP normal (page refresh).

* ajax_sort => BOOL (optional, default 0)

jika diset 1 artinya link sort di header row akan menggunakan AJAX update dan bukan
link normal (page refresh).

* ajax_more_actions => BOOL (optional, default 0)

jika diset 1 artinya pemilihan sebuah action dalam daftar more-actions akan berakibat
AJAX action 'update' dan bukan submit biasa (page refresh).

* ajax_paging => BOOL (optional, default 0)

jika diset 1 artinya link Next Page/Prev Page/dst akan menggunakan AJAX update dan
bukan link normal (page refresh).

* ajax_update_frequency => (optional, default 0)

berapa lama sekali mengecek ke server untuk update (dalam detik).
0 artinya disable.

* filters => ARRAY

contoh: filters => array(
  array('name'=>'filter1', 'title'=>'Filter 1', ...)

** name
** title
** choices
** default
** jsdirect => BOOL (optional, default=0)

hanya relevan untuk yang memiliki choices.

jika diset 1, maka begitu diselect akan refresh page (menggunakan select.onChange), atau
update melalui ajax (jika ajax_filter diset 1). jika tidak (default behaviour), maka user
harus mengklik tombol [Filter] dulu. berguna jika kita hanya punya 1 filter, atau memang
ingin setiap mengeset nilai filter maka page refresh.

** incremental => INT (optional, default 0)

hanya relevan untuk input tanpa choices (type=text) dan jika ajax_filter dihidupkan.

jika diset >0, akan melakukan incremental/ajax update setiap angka ini (dalam ms) setiap
selesai mengetik.

** incremental_minlen => INT (optional, default 0)

hanya relevan jika incremental diset

panjang minimal nilai input sebelum ajax dilakukan.

=====sorting=====

* default_sort_column
* default_sort_column_order => STRING

ASC or DESC

* default_sort2_column
* default_sort2_column_order
* default_sort3_column
* default_sort3_column_order

=====show/hide parts=====

* hide_pagingbar => BOOL (optional, default=false)
* hide_filterbar => BOOL (optional, default=false)
* hide_actionbar => BOOL (optional, default=false)
* hide_checkboxes => BOOL (optional, default=false)
* hide_rowactions => BOOL (optional, default=false)
* hide_totavgrow => BOOL (optional, default=false)

biasanya kita mengaktifkan ini jika ingin membuat tampilan yang lebih sederhana,
contohnya jika kita tahu data tidak akan melebihi 1 page maka kita bisa
hidupkan hide_pagingbar. jika grid tidak memiliki grid actions, maka kita bisa
matikan checkboxes, dsb. jika semua di atas dimatikan, maka yang muncul hanyalah
sebuah tabel berisi kolom2x yang bisa disort, tanpa ada paging, row actions,
checkboxes, dsb.

* show_csv_export_link => BOOL (optional, default=false)

=====yang berhubungan dengan warna=====

* filterbar_bgcolor
* filterbar_color

* rowheader_bgcolor
* rowheader_color

* totrow_bgcolor
* totrow_color
* avgrow_bgcolor
* avgrow_color

* row_color
* row_color_func

* row_bgcolor1
* row_bgcolor2
* row_bgcolor_func

===troubleshooting grid===

* nilai average atau total 2x (atau 3x, 4x, ...) dari yang seharusnya.

ini disebabkan karena ada kolom yang nilai dbcolumn-nya sama, mis:

 $grid = array(
   ...
   'columns' => array(
     'a'  => array('dbcolumn' => 'a', ...)
     'a2' => array('dbcolumn' => 'a', ...)
     ...
   ),
   ...
 );

sehingga 'a' tertotal/teraverage 2 kali saat perhitungan.
